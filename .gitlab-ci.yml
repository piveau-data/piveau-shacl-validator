variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

cache:
  paths:
    - .m2/repository

stages:
  - test
  - build
  - register
  - deploy

test:
  stage: test
  image: maven:3-jdk-12
  except:
    - tags
  tags:
    - vst
  script:
    - mvn $MAVEN_CLI_OPTS -U clean test
  artifacts:
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    paths:
      - target

build:
  stage: build
  image: maven:3-jdk-12
  only:
    - develop
    - master
    - tags
  tags:
    - dind
  script:
    - mvn $MAVEN_CLI_OPTS -U package -DskipTests
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    paths:
      - target/*.jar

register develop:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - develop
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

register master:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - master
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE:prerelease .
    - docker push $CI_REGISTRY_IMAGE:prerelease

register release:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - tags
  except:
    - branches
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

deploy to edp okd:
  stage: deploy
  only:
    - develop
  image: ebits/openshift-client
  environment:
    name: EDP2-testing
  script:
    - oc login "$OPENSHIFT_SERVER" --token="$OKD_TOKEN_EDP2" --insecure-skip-tls-verify
    - oc import-image $CI_PROJECT_NAME --from=$CI_REGISTRY_IMAGE --confirm
    - oc get services $CI_PROJECT_NAME 2> /dev/null || oc new-app --name=$CI_PROJECT_NAME --image-stream=$CI_PROJECT_NAME
    - oc get routes $CI_PROJECT_NAME 2> /dev/null || oc create route edge --service=$CI_PROJECT_NAME --hostname=$CI_PROJECT_NAME-$EDP2_OKD_DOMAIN --insecure-policy=Redirect --port=8080

deploy to edp ppe:
  stage: deploy
  only:
    - master
  image: appropriate/curl
  variables:
    JENKINS_JOB: (ppe-aws)%20piveau-validating-shacl
  environment:
    name: EDP2-pre-production
  script:
    - curl -sSfI "https://$EDP2_JENKINS_USER:$EDP2_JENKINS_PW@$EDP2_JENKINS_BASEURL/$JENKINS_JOB/buildWithParameters?token=$EDP2_JENKINS_TOKEN&TAG=prerelease"

deploy to edp prod:
  stage: deploy
  when: manual
  only:
    - tags
  except:
    - branches
  image: appropriate/curl
  variables:
    JENKINS_JOB: (prod-aws)%20piveau-validating-shacl
  environment:
    name: EDP2-production
  script:
    - curl -sSfI "https://$EDP2_JENKINS_USER:$EDP2_JENKINS_PW@$EDP2_JENKINS_BASEURL/$JENKINS_JOB/buildWithParameters?token=$EDP2_JENKINS_TOKEN&TAG=$CI_COMMIT_TAG"
